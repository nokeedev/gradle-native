plugins {
	id 'dev.gradleplugins.gradle-plugin-development' version '1.5'
}

rootProject.name = 'gradle-native'

includeBuild 'subprojects/templates'
includeBuild 'gradle/plugins/docs-gradle-plugin'
includeBuild 'gradle/plugins/license-gradle-plugin'

include 'buildAdapterCmake'
project(':buildAdapterCmake').projectDir = file('subprojects/build-adapter-cmake')
project(':buildAdapterCmake').buildFileName = 'build-adapter-cmake.gradle'

include 'coreExec'
project(':coreExec').projectDir = file('subprojects/core-exec')
project(':coreExec').buildFileName = 'core-exec.gradle'

include 'coreGradle'
project(':coreGradle').projectDir = file('subprojects/core-gradle')
project(':coreGradle').buildFileName = 'core-gradle.gradle'

include 'gradleAnnotation'
project(':gradleAnnotation').projectDir = file('subprojects/gradle-annotation')
project(':gradleAnnotation').buildFileName = 'gradle-annotation.gradle'

include 'coreModel'
project(':coreModel').projectDir = file('subprojects/core-model')
project(':coreModel').buildFileName = 'core-model.gradle'

include 'coreScript'
project(':coreScript').projectDir = file('subprojects/core-script')
project(':coreScript').buildFileName = 'core-script.gradle'

include 'coreUtils'
project(':coreUtils').projectDir = file('subprojects/core-utils')
project(':coreUtils').buildFileName = 'core-utils.gradle'

include 'distributions'
project(':distributions').projectDir = file('subprojects/distributions')
project(':distributions').buildFileName = 'distributions.gradle'

include 'distributions:all'
project(':distributions:all').projectDir = file('subprojects/distributions/all')
project(':distributions:all').buildFileName = 'distributions-all.gradle'

include 'distributions:bom'
project(':distributions:bom').projectDir = file('subprojects/distributions/bom')
project(':distributions:bom').buildFileName = 'distributions-bom.gradle'

include 'ideBase'
project(':ideBase').projectDir = file('subprojects/ide-base')
project(':ideBase').buildFileName = 'ide-base.gradle'

include 'ideVisualStudio'
project(':ideVisualStudio').projectDir = file('subprojects/ide-visual-studio')
project(':ideVisualStudio').buildFileName = 'ide-visual-studio.gradle'

include 'ideXcode'
project(':ideXcode').projectDir = file('subprojects/ide-xcode')
project(':ideXcode').buildFileName = 'ide-xcode.gradle'

include 'internalSmokeTest'
project(':internalSmokeTest').projectDir = file('subprojects/internal-smoke-test')
project(':internalSmokeTest').buildFileName = 'internal-smoke-test.gradle'

include 'internalTesting'
project(':internalTesting').projectDir = file('subprojects/internal-testing')
project(':internalTesting').buildFileName = 'internal-testing.gradle'

include 'languageBase'
project(':languageBase').projectDir = file('subprojects/language-base')
project(':languageBase').buildFileName = 'language-base.gradle'

include 'languageC'
project(':languageC').projectDir = file('subprojects/language-c')
project(':languageC').buildFileName = 'language-c.gradle'

include 'languageCpp'
project(':languageCpp').projectDir = file('subprojects/language-cpp')
project(':languageCpp').buildFileName = 'language-cpp.gradle'

include 'languageNative'
project(':languageNative').projectDir = file('subprojects/language-native')
project(':languageNative').buildFileName = 'language-native.gradle'

include 'languageObjectiveC'
project(':languageObjectiveC').projectDir = file('subprojects/language-objective-c')
project(':languageObjectiveC').buildFileName = 'language-objective-c.gradle'

include 'languageObjectiveCpp'
project(':languageObjectiveCpp').projectDir = file('subprojects/language-objective-cpp')
project(':languageObjectiveCpp').buildFileName = 'language-objective-cpp.gradle'

include 'languageSwift'
project(':languageSwift').projectDir = file('subprojects/language-swift')
project(':languageSwift').buildFileName = 'language-swift.gradle'

include 'platformBase'
project(':platformBase').projectDir = file('subprojects/platform-base')
project(':platformBase').buildFileName = 'platform-base.gradle'

include 'platformC'
project(':platformC').projectDir = file('subprojects/platform-c')
project(':platformC').buildFileName = 'platform-c.gradle'

include 'platformCpp'
project(':platformCpp').projectDir = file('subprojects/platform-cpp')
project(':platformCpp').buildFileName = 'platform-cpp.gradle'

include 'platformNative'
project(':platformNative').projectDir = file('subprojects/platform-native')
project(':platformNative').buildFileName = 'platform-native.gradle'

include 'platformObjectiveC'
project(':platformObjectiveC').projectDir = file('subprojects/platform-objective-c')
project(':platformObjectiveC').buildFileName = 'platform-objective-c.gradle'

include 'platformObjectiveCpp'
project(':platformObjectiveCpp').projectDir = file('subprojects/platform-objective-cpp')
project(':platformObjectiveCpp').buildFileName = 'platform-objective-cpp.gradle'

include 'platformSwift'
project(':platformSwift').projectDir = file('subprojects/platform-swift')
project(':platformSwift').buildFileName = 'platform-swift.gradle'

include 'platformIos'
project(':platformIos').projectDir = file('subprojects/platform-ios')
project(':platformIos').buildFileName = 'platform-ios.gradle'

include 'platformJni'
project(':platformJni').projectDir = file('subprojects/platform-jni')
project(':platformJni').buildFileName = 'platform-jni.gradle'

include 'publishingCore'
project(':publishingCore').projectDir = file('subprojects/publishing-core')
project(':publishingCore').buildFileName = 'publishing-core.gradle'

include 'runtimeBase'
project(':runtimeBase').projectDir = file('subprojects/runtime-base')
project(':runtimeBase').buildFileName = 'runtime-base.gradle'

include 'runtimeNative'
project(':runtimeNative').projectDir = file('subprojects/runtime-native')
project(':runtimeNative').buildFileName = 'runtime-native.gradle'

include 'runtimeDarwin'
project(':runtimeDarwin').projectDir = file('subprojects/runtime-darwin')
project(':runtimeDarwin').buildFileName = 'runtime-darwin.gradle'

include 'runtimeWindows'
project(':runtimeWindows').projectDir = file('subprojects/runtime-windows')
project(':runtimeWindows').buildFileName = 'runtime-windows.gradle'

include 'testingBase'
project(':testingBase').projectDir = file('subprojects/testing-base')
project(':testingBase').buildFileName = 'testing-base.gradle'

include 'testingNative'
project(':testingNative').projectDir = file('subprojects/testing-native')
project(':testingNative').buildFileName = 'testing-native.gradle'

include 'testingXctest'
project(':testingXctest').projectDir = file('subprojects/testing-xctest')
project(':testingXctest').buildFileName = 'testing-xctest.gradle'

include 'docs'
project(':docs').projectDir = file('subprojects/docs')
project(':docs').buildFileName = 'docs.gradle'

include 'docs:exemplarKit'
project(':docs:exemplarKit').projectDir = file('subprojects/docs/exemplar-kit')
project(':docs:exemplarKit').buildFileName = 'exemplar-kit.gradle'

buildCache {
	remote(HttpBuildCache) {
		url = 'https://gradle-build-cache.nokee.dev/cache/'
		credentials {
			username = System.getProperty('nokeeBuildCacheUsername')
			password = System.getProperty('nokeeBuildCachePassword')
		}
		enabled = credentials.username != null && credentials.password != null
		push = System.getenv().containsKey('CI')
	}
}

plugins.withId('com.gradle.enterprise') {
	gradleEnterprise {
		buildScan {
			termsOfServiceUrl = "https://gradle.com/terms-of-service"
			termsOfServiceAgree = "yes"

			if (System.getenv('CI')) {
				tag 'CI'
			} else {
				tag 'LOCAL'
			}

			obfuscation {
				username { name -> 'super-human' }
				hostname { host -> 'somewhere' }
				ipAddresses { addresses -> addresses.collect { '1.2.3.4' } }
			}
		}
	}
}
