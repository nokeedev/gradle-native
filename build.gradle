buildscript {
	repositories {
		mavenCentral()
		maven { url = 'subprojects/distributions/build/repository' }
		maven { url = 'https://repo.nokee.dev/snapshot' }
		maven { url = 'https://repo.nokee.dev/release' }
	}
	dependencies {
		classpath 'dev.gradleplugins:documentation-kit:latest.integration'
		classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.15.1'
		classpath 'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.0.1'
		classpath 'dev.nokeebuild:license-gradle-plugin:latest.integration'
	}
}

plugins {
	id 'org.shipkit.shipkit-auto-version' version '1.1.1'
}

allprojects {
	apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'dev.nokeebuild.license'
	spotless {
		pluginManager.withPlugin('java-base') {
			java {
				targetExclude files('build/generated-src').asFileTree
			}
		}
	}
}

import org.gradle.util.VersionNumber

import java.text.SimpleDateFormat

class Version {
	private VersionNumber delegate = null
	private final ProjectLayout projectLayout
	private final Object autoVersion

	Version(ProjectLayout projectLayout, Object autoVersion) {
		this.autoVersion = autoVersion
		this.projectLayout = projectLayout
	}

	@Override
	String toString() {
		maybeLoad()
		return delegate.toString()
	}

	private void maybeLoad() {
		if (delegate == null) {
			if (System.getProperties().containsKey("release")) {
				delegate = VersionNumber.parse(loadBaseVersion())
			} else if (System.getProperties().containsKey('milestone')) {
				delegate = VersionNumber.parse(autoVersion.toString())
			} else if (System.getProperties().containsKey('integration')) { // Support multiple version of the same commit
				delegate = VersionNumber.parse("${autoVersion}-${new SimpleDateFormat("yyyyMMddHHmm").format(new Date())}.${loadQualifier()}")
			} else {
				delegate = VersionNumber.parse("${loadBaseVersion()}-SNAPSHOT") // stable local
			}
		}
	}

	private String loadBaseVersion() {
		return projectLayout.projectDirectory.file('version.txt').asFile.text.trim()
	}

	private String loadQualifier() {
		// CI macOS is using a version that prompt a shorter value by 1 char... Tabar...
		def process = "git rev-parse --short=8 HEAD".execute(null, projectLayout.projectDirectory.asFile)
		process.waitFor()
		def result = process.in.text.trim()
		return result
	}
}

def v = new Version(layout, version)
println("Version overridden to ${v}")
allprojects {
	version = v
	group = 'dev.nokee'
}

// Cleans $buildDir/tmp/test files on project check
subprojects {
	plugins.withType(LifecycleBasePlugin) {
		def cleanTestFiles = tasks.register('cleanTestFiles', Delete) {
			delete(layout.buildDirectory.file('tmp/test files'))
		}

		tasks.withType(Test).configureEach {
			mustRunAfter(cleanTestFiles)
		}

		tasks.named(LifecycleBasePlugin.CHECK_TASK_NAME) {
			dependsOn cleanTestFiles
		}
	}
}

// Configure test for java-library
subprojects {
	pluginManager.withPlugin('java-library') {
		dependencies {
			testImplementation project(':internalTesting')
		}
	}
}

// Configure JUnit 5 compatibility
subprojects {
	tasks.withType(Test).configureEach { it.useJUnitPlatform() }
}

// Configure Documentation
subprojects { prj ->
	if (prj.name == 'internalTesting') {
		return; // skip
	}
	pluginManager.apply('dev.gradleplugins.documentation.dsl-reference')
	pluginManager.apply('dev.gradleplugins.documentation.api-reference')
	pluginManager.apply('dev.gradleplugins.documentation.javadoc-render')
	prj.configurations.matching { it.name == 'implementation' }.all { implementation ->
		prj.extensions.components.apiReference {
			dependencies.api.asConfiguration.extendsFrom(implementation)
		}
	}
	prj.configurations.matching { it.name == 'compileOnly' }.all { compileOnly ->
		prj.extensions.components.apiReference {
			dependencies.api.asConfiguration.extendsFrom(compileOnly)
		}
	}
	tasks.named('generateDslReference') {
		templateFile = rootProject.file('subprojects/docs/src/docs/dsl/dsl.template')
	}
}

// Configure publishing to Nokee
subprojects { prj ->
	if (prj == project(':docs')) {
		return // ignore this configuration
	}
	pluginManager.withPlugin('maven-publish') {
		// Register Nokee repositories
		publishing {
			repositories {
				maven {
					name = 'nokeeRelease'
					url = providers.gradleProperty("${name}Url").forUseAtConfigurationTime().orElse('')
					credentials(AwsCredentials)
				}
				maven {
					name = 'nokeeSnapshot'
					url = providers.gradleProperty("${name}Url").forUseAtConfigurationTime().orElse('')
					credentials(AwsCredentials)
				}
			}
		}

		// Prevent publishing mistakes
		prj.tasks.withType(PublishToMavenRepository).configureEach {
			doFirst {
				if (repository.name == 'nokeeRelease' && publication.version.contains('-')) {
					throw new UnsupportedOperationException('Please publish snapshot artifacts in snapshot repository')
				} else if (repository.name == 'nokeeSnapshot' && !publication.version.contains('-')) {
					throw new UnsupportedOperationException('Please publish release artifacts in release repository')
				}
			}
			doLast {
				println "Published version ${publication.version}"
			}
		}

		// Register lifecycle task to publish into Nokee repositories
		prj.tasks.register('publishToNokee') {
			dependsOn({
				if (prj.version.toString().contains('-')) {
					return ['publishAllPublicationsToNokeeSnapshotRepository']
				}
				return ['publishAllPublicationsToNokeeReleaseRepository']
			})
		}
	}
}
// Add lifecycle task to print the published version
tasks.register('publishAllPublicationsToNokeeSnapshotRepository') {
	doLast {
		println "Published version ${project.version}"
	}
}
tasks.register('publishAllPublicationsToNokeeReleaseRepository') {
	doLast {
		println "Published version ${project.version}"
	}
}
