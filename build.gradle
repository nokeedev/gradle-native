plugins {
	id 'nokeebuild.nokee-auto-version'
	id 'nokeebuild.intellij-ide'
	id 'nokeebuild.continuous-integration'
}

allprojects {
	group = 'dev.nokee'
}

// Configure test for java-library
subprojects {
	pluginManager.withPlugin('java-library') {
		dependencies {
			testImplementation project(':internalTesting')
		}
	}
}

// Configure JUnit 5 compatibility
subprojects {
	tasks.withType(Test).configureEach { it.useJUnitPlatform() }
}

// Configure publishing to Nokee
subprojects { prj ->
	if (prj == project(':docs')) {
		return // ignore this configuration
	}
	pluginManager.withPlugin('maven-publish') {
		// Register Nokee repositories
		publishing {
			repositories {
				maven {
					name = 'nokeeRelease'
					url = providers.gradleProperty("${name}Url").forUseAtConfigurationTime().orElse('')
					credentials(AwsCredentials)
				}
				maven {
					name = 'nokeeSnapshot'
					url = providers.gradleProperty("${name}Url").forUseAtConfigurationTime().orElse('')
					credentials(AwsCredentials)
				}
			}
		}

		// Prevent publishing mistakes
		prj.tasks.withType(PublishToMavenRepository).configureEach {
			doFirst {
				if (repository.name == 'nokeeRelease' && publication.version.contains('-')) {
					throw new UnsupportedOperationException('Please publish snapshot artifacts in snapshot repository')
				} else if (repository.name == 'nokeeSnapshot' && !publication.version.contains('-')) {
					throw new UnsupportedOperationException('Please publish release artifacts in release repository')
				}
			}
			doLast {
				println "Published version ${publication.version}"
			}
		}

		// Register lifecycle task to publish into Nokee repositories
		prj.tasks.register('publishToNokee') {
			dependsOn({
				if (prj.version.toString().contains('-')) {
					return ['publishAllPublicationsToNokeeSnapshotRepository']
				}
				return ['publishAllPublicationsToNokeeReleaseRepository']
			})
		}
	}
}
// Add lifecycle task to print the published version
tasks.register('publishAllPublicationsToNokeeSnapshotRepository') {
	doLast {
		println "Published version ${project.version}"
	}
}
tasks.register('publishAllPublicationsToNokeeReleaseRepository') {
	doLast {
		println "Published version ${project.version}"
	}
}

tasks.named('sanityCheck') { task ->
	task.dependsOn(gradle.includedBuild('jbake-gradle-plugin').task(':check'))
	task.dependsOn(gradle.includedBuild('nokeebuild-plugins').task(':check'))
	task.dependsOn(gradle.includedBuild('gradle-build-script').task(':check'))
}
