/*
 * Copyright 2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nokeebuild.testing.performance.reporting;

import groovy.lang.Closure;
import org.gradle.api.Task;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.provider.Property;
import org.gradle.api.provider.Provider;
import org.gradle.api.reporting.DirectoryReport;
import org.gradle.api.reporting.Report;

import javax.inject.Inject;
import java.io.File;

public abstract class PerformanceScenarioXmlReport implements DirectoryReport {
	private final String name;
	private final String displayName;

	@Inject
	public PerformanceScenarioXmlReport(String name, Task task) {
		this.name = name;
		this.displayName = calculateDisplayName(name, task);
		getRequired().convention(true);
		getOutputLocation().set(new File("bob"));
	}

	private static String calculateDisplayName(String name, Task task) {
		return "Report generated by task '" + task.getPath() + "' (" + name + ")";
	}

	@Override
	public File getEntryPoint() {
		return getOutputLocation().getAsFile().get();
	}

	@Override
	public abstract DirectoryProperty getOutputLocation();

	@Override
	@Deprecated
	public File getDestination() {
		return getOutputLocation().getAsFile().get();
	}

	@Override
	public OutputType getOutputType() {
		return OutputType.DIRECTORY;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public String getDisplayName() {
		return displayName;
	}

	@Override
	public abstract Property<Boolean> getRequired();

	@Override
	@Deprecated
	public boolean isEnabled() {
		return getRequired().get();
	}

	@Override
	@Deprecated
	public void setEnabled(boolean enabled) {
		getRequired().set(enabled);
	}

	@Override
	public void setEnabled(Provider<Boolean> enabled) {
		getRequired().set(enabled);
	}

	@Override
	@Deprecated
	public void setDestination(File file) {
		getOutputLocation().set(file);
	}

	@Override
	@Deprecated
	public void setDestination(Provider<File> provider) {
		getOutputLocation().fileProvider(provider);
	}

	@Override
	public Report configure(Closure closure) {
		Closure<?> copy = (Closure<?>) closure.clone();
		copy.setResolveStrategy(Closure.DELEGATE_FIRST);
		copy.setDelegate(this);
		if (copy.getMaximumNumberOfParameters() == 0) {
			copy.call();
		} else {
			copy.call(this);
		}
		return this;
	}

	@Override
	public String toString() {
		return "Report " + getName();
	}
}
