import java.nio.file.Files

plugins {
	id 'nokeebuild.java-gradle-library'
	id 'nokeebuild.gradle-plugin-unit-test'
	id 'nokeebuild.gradle-plugin-integration-test'
	id 'antlr'
	id 'maven-publish'
	id 'java-test-fixtures'
}

dependencies {
	implementation "com.google.guava:guava:${guavaVersion}"
	implementation "org.antlr:antlr4:${antlrVersion}"
	implementation "commons-io:commons-io:${commonsIoVersion}"
	implementation project(':coreUtils')
	antlr "org.antlr:antlr4:${antlrVersion}"
}

test {
	dependencies {
		implementation "nl.jqno.equalsverifier:equalsverifier:${equalsverifierVersion}"
	}
}

ModuleDependency templates(Object notation) {
	return ((ModuleDependency) dependencies.create(notation)).capabilities { ModuleDependencyCapabilitiesHandler capabilities ->
		capabilities.requireCapability('dev.nokee:template-elements:1.0')
	}
}

abstract class GenerateSources extends DefaultTask {
	@OutputDirectory
	abstract DirectoryProperty getDestinationDirectory()

	@Input
	abstract Property<String> getPackageName()

	@Input
	abstract SetProperty<String> getSamples()

	@TaskAction
	void doGenerate() {
		def destinationPath = destinationDirectory.asFile.get().toPath().resolve(packageName.get().replace('.', '/'))
		Files.createDirectories(destinationPath)
		samples.get().each { sampleName ->
			def sampleClassName = GUtil.toCamelCase(sampleName)
			destinationPath.resolve("${sampleClassName}.java").text = """/*
				| * Copyright 2022 the original author or authors.
				| *
				| * Licensed under the Apache License, Version 2.0 (the "License");
				| * you may not use this file except in compliance with the License.
				| * You may obtain a copy of the License at
				| *
				| *     https://www.apache.org/licenses/LICENSE-2.0
				| *
				| * Unless required by applicable law or agreed to in writing, software
				| * distributed under the License is distributed on an "AS IS" BASIS,
				| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				| * See the License for the specific language governing permissions and
				| * limitations under the License.
				| */
				|package ${packageName.get()};
				|
				|import dev.gradleplugins.fixtures.sources.SourceElement;
				|import dev.gradleplugins.fixtures.sources.SourceFile;
				|
				|import java.io.BufferedReader;
				|import java.io.ByteArrayOutputStream;
				|import java.io.File;
				|import java.io.IOException;
				|import java.io.InputStream;
				|import java.io.InputStreamReader;
				|import java.io.UncheckedIOException;
				|import java.nio.charset.StandardCharsets;
				|import java.nio.file.Path;
				|import java.nio.file.Paths;
				|import java.util.List;
				|import java.util.Objects;
				|import java.util.Optional;
				|import java.util.stream.Collectors;
				|
				|public final class ${sampleClassName} extends SourceElement {
				|	@Override
				|	public List<SourceFile> getFiles() {
				|		final InputStream inStream = this.getClass().getResourceAsStream("/${sampleName}.sample");
				|		try (final BufferedReader reader = new BufferedReader(new InputStreamReader(inStream))) {
				|			return reader.lines().map(it -> {
				|				Path fullPath = Paths.get(it.substring(it.indexOf('/') + 1));
				|				return sourceFile(Optional.ofNullable(fullPath.getParent()).map(Objects::toString).orElse(""), fullPath.getFileName().toString(), readAll(it));
				|			}).collect(Collectors.toList());
				|		} catch (IOException e) {
				|			throw new UncheckedIOException(e);
				|		}
				|	}
				|
				|	private static String readAll(String path) {
				|		try (InputStream inStream = ${sampleClassName}.class.getResourceAsStream("/" + path)) {
				|			ByteArrayOutputStream result = new ByteArrayOutputStream();
				|			byte[] buffer = new byte[1024];
				|			for (int length; (length = inStream.read(buffer)) != -1; ) {
				|				result.write(buffer, 0, length);
				|			}
				|			return result.toString(StandardCharsets.UTF_8.name());
				|		} catch (IOException e) {
				|			throw new UncheckedIOException(e);
				|		}
				|	}
				|
				|	@Override
				|	public void writeToProject(File projectDir) {
				|		for (SourceFile sourceFile : getFiles()) {
				|			sourceFile.writeToDirectory(projectDir);
				|		}
				|	}
				|}
				|""".stripMargin()
		}
	}
}

sourceSets.register('templates') { SourceSet sourceSet ->
	// So the SourceSet#getApiConfigurationName() exists
	project.java.registerFeature("templates") {
		it.capability('dev.nokee', 'template-elements', '1.0')
		it.usingSourceSet(sourceSet)
	}

	def samples = file("src/${sourceSet.name}").listFiles({ it.directory } as FileFilter)
	sourceSet.ext.generateSourcesTaskName = sourceSet.getTaskName('generate', 'sources')
	def generatorTask = tasks.register(generateSourcesTaskName, GenerateSources) { GenerateSources task ->
		task.destinationDirectory = layout.buildDirectory.dir("tmp/${task.name}")
		task.packageName = project.group.toString()
		task.samples = samples.collect { it.name }
	}
	sourceSet.java.srcDir(generatorTask.flatMap { it.destinationDirectory })

	tasks.named(sourceSet.compileJavaTaskName, JavaCompile) { JavaCompile task ->
		task.source(generatorTask.flatMap { it.destinationDirectory })
	}

	dependencies.add(sourceSet.apiConfigurationName, 'dev.gradleplugins:gradle-fixtures-source-elements:latest.release')

	sourceSet.ext.processSamplesTaskName = sourceSet.getTaskName('process', 'samples')
	def processorTask = tasks.register(processSamplesTaskName, Sync) { Sync task ->
		def receipt = [:].withDefault { String k ->
			if (samples.any { it.name == k }) {
				return []
			} else {
				return null
			}
		}
		samples.each { sampleDir ->
			task.from(sampleDir) { into(sampleDir.name) }
		}

		task.eachFile {
			receipt.computeIfPresent(it.relativePath.segments[0]) { key, value ->
				value.add(it.relativePath.toString())
				return value
			}
		}
		task.doLast {
			receipt.each { k, v ->
				new File(task.getDestinationDir(), "${k}.sample").text = v.join('\n')
			}
		}
		task.destinationDir = file(layout.buildDirectory.dir("tmp/${task.name}"))
	}

	tasks.named(sourceSet.processResourcesTaskName, ProcessResources) { ProcessResources task ->
		task.from(processorTask)
	}
}


dependencies {
	integrationTestImplementation(templates(project))
}

tasks.named(sourceSets.templates.generateSourcesTaskName) { task ->
	task.packageName = 'dev.nokee.samples.xcode'
}

tasks.named(sourceSets.templates.processSamplesTaskName, Sync) { task ->
	exclude("**/*.xcuserdatad/**")
	includeEmptyDirs(false)
}
