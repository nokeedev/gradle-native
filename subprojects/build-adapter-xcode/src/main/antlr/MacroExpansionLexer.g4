lexer grammar MacroExpansionLexer;

@header {
package dev.nokee.xcode;
}

tokens { OPEN_EXPANSION, CLOSE_EXPANSION, OPERATION_COMMA, OPERATION_COLON }

VARNAME: [a-zA-Z_][a-zA-Z0-9_.]*;
ESCAPED_DOLLAR: '$$';
DOLLAR: '$';
DOLLAR_LPAREN:	'$(' -> type(OPEN_EXPANSION), pushMode(PAREN_EXPANSION);
DOLLAR_LCURLY:	'${' -> type(OPEN_EXPANSION), pushMode(CURLY_EXPANSION);
DOLLAR_LSQUAR:	'$[' -> type(OPEN_EXPANSION), pushMode(SQUAR_EXPANSION);
RPAREN: ')';
RCURLY: '}';
RSQUAR: ']';
ANY: .;
COLON: ':';
COMMA: ',';
EQUAL: '=';

mode PAREN_EXPANSION;
PAREN_VARNAME:			VARNAME -> type(VARNAME);
PAREN_COLON:			COLON -> type(OPERATION_COLON);
PAREN_COMMA:			COMMA -> type(OPERATION_COMMA);
PAREN_EQUAL:			EQUAL -> type(EQUAL);
PAREN_DOLLAR:			'$' -> type(DOLLAR);
PAREN_DOLLAR_LPAREN:	'$(' -> type(OPEN_EXPANSION), pushMode(PAREN_EXPANSION);
PAREN_DOLLAR_LCURLY:	'${' -> type(OPEN_EXPANSION), pushMode(CURLY_EXPANSION);
PAREN_DOLLAR_LSQUAR:	'$[' -> type(OPEN_EXPANSION), pushMode(SQUAR_EXPANSION);
PAREN_RPAREN:			RPAREN -> type(CLOSE_EXPANSION), popMode;
PAREN_ANY:				ANY -> type(ANY);

mode CURLY_EXPANSION;
CURLY_VARNAME:			VARNAME -> type(VARNAME);
CURLY_COLON:			COLON -> type(OPERATION_COLON);
CURLY_COMMA:			COMMA -> type(OPERATION_COMMA);
CURLY_EQUAL:			EQUAL -> type(EQUAL);
CURLY_DOLLAR:			'$' -> type(DOLLAR);
CURLY_DOLLAR_LPAREN:	'$(' -> type(OPEN_EXPANSION), pushMode(PAREN_EXPANSION);
CURLY_DOLLAR_LCURLY:	'${' -> type(OPEN_EXPANSION), pushMode(CURLY_EXPANSION);
CURLY_DOLLAR_LSQUAR:	'$[' -> type(OPEN_EXPANSION), pushMode(SQUAR_EXPANSION);
CURLY_RCURLY:			RCURLY -> type(CLOSE_EXPANSION), popMode;
CURLY_ANY:				ANY -> type(ANY);

mode SQUAR_EXPANSION;
SQUAR_VARNAME:			VARNAME -> type(VARNAME);
SQUAR_COLON:			COLON -> type(OPERATION_COLON);
SQUAR_COMMA:			COMMA -> type(OPERATION_COMMA);
SQUAR_EQUAL:			EQUAL -> type(EQUAL);
SQUAR_DOLLAR:			'$' -> type(DOLLAR);
SQUAR_DOLLAR_LPAREN:	'$(' -> type(OPEN_EXPANSION), pushMode(PAREN_EXPANSION);
SQUAR_DOLLAR_LCURLY:	'${' -> type(OPEN_EXPANSION), pushMode(CURLY_EXPANSION);
SQUAR_DOLLAR_LSQUAR:	'$[' -> type(OPEN_EXPANSION), pushMode(SQUAR_EXPANSION);
SQUAR_RSQUAR:			RSQUAR -> type(CLOSE_EXPANSION), popMode;
SQUAR_ANY:				ANY -> type(ANY);
