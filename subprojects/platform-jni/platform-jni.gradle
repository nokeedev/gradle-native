plugins {
	id 'dev.gradleplugins.java-gradle-plugin'
	id 'maven-publish'
}

dependencies {
	api project(':platformBase')
	api project(':platformNative')
	implementation project(':coreUtils')
	implementation project(':runtimeDarwin')
	implementation project(':runtimeNative')
	implementation project(':languageC')
	implementation project(':languageCpp')
	implementation project(':languageObjectiveC')
	implementation project(':languageObjectiveCpp')
	implementation project(':languageSwift')

	implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
	implementation "com.google.guava:guava:${guavaVersion}"
	implementation "commons-io:commons-io:${commonsIoVersion}"
}

gradlePlugin {
	plugins {
		jniLibrary {
			id = 'dev.nokee.jni-library'
			implementationClass = 'dev.nokee.platform.jni.internal.plugins.JniLibraryPlugin'
		}
	}
}

test {
	dependencies {
		implementation testFixtures(project(':platformNative'))
		implementation testFixtures(project(':platformBase'))
		implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10"
		implementation "dev.gradleplugins:gradle-fixtures-well-behaving-plugins:latest.release"
	}
}

functionalTest {
	dependencies {
		pluginUnderTestMetadata project(':languageNative')
		pluginUnderTestMetadata project(':platformC')
		pluginUnderTestMetadata project(':platformCpp')

		implementation project(':platformBase')
		implementation project(':platformNative')
		implementation project(':runtimeDarwin')
		implementation project(':runtimeNative')
		implementation 'dev.nokee:templates:latest.integration'
		implementation "commons-io:commons-io:${commonsIoVersion}"
		implementation project(':coreExec')
		implementation testFixtures(project(':languageC'))
		implementation testFixtures(project(':languageCpp'))
		implementation testFixtures(project(':languageObjectiveC'))
		implementation testFixtures(project(':languageObjectiveCpp'))
		implementation testFixtures(project(':platformNative'))
	}
}

// Unfortunately, because of the debt inherited from Gradle around how Windows toolchains are discovered
import org.gradle.internal.os.OperatingSystem
if (OperatingSystem.current().windows) {
	tasks.named('test', Test) {
		forkEvery(1)
	}
}
