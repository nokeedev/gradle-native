plugins {
	id 'groovy'
	id 'java-library'
}

import static dev.gradleplugins.GradleRuntimeCompatibility.*

group = 'dev.nokee'
version = '0.1'

java {
	sourceCompatibility = minimumJavaVersionFor(minimumGradleVersion)
	targetCompatibility = minimumJavaVersionFor(minimumGradleVersion)
}

repositories {
	mavenLocal()
	mavenCentral()
	gradlePluginDevelopment()
}

dependencies {
	implementation 'org.codehaus.groovy:groovy-all:2.5.8'
	api 'dev.gradleplugins:gradle-fixtures-source-elements:latest.release'
	implementation 'dev.gradleplugins:gradle-fixtures-file-system:latest.release'
	implementation 'com.google.guava:guava:28.2-jre'
	api('dev.nokee.templates:template-jni-greeter:1.0') { dependency ->
		dependency.capabilities {
			it.requireCapability("${dependency.group}:${dependency.name}-templates:${dependency.version}")
		}
	}
	api('dev.nokee.templates:template-c-greeter:1.0') { dependency ->
		dependency.capabilities {
			it.requireCapability("${dependency.group}:${dependency.name}-templates:${dependency.version}")
		}
	}
	api('dev.nokee.templates:template-cpp-greeter:1.0') { dependency ->
		dependency.capabilities {
			it.requireCapability("${dependency.group}:${dependency.name}-templates:${dependency.version}")
		}
	}
	api('dev.nokee.templates:template-objc-greeter:1.0') { dependency ->
		dependency.capabilities {
			it.requireCapability("${dependency.group}:${dependency.name}-templates:${dependency.version}")
		}
	}
	api('dev.nokee.templates:template-objcpp-greeter:1.0') { dependency ->
		dependency.capabilities {
			it.requireCapability("${dependency.group}:${dependency.name}-templates:${dependency.version}")
		}
	}
	api('dev.nokee.templates:template-swift-greeter:1.0') { dependency ->
		dependency.capabilities {
			it.requireCapability("${dependency.group}:${dependency.name}-templates:${dependency.version}")
		}
	}
}

tasks.named("processResources", ProcessResources) { task ->
	def receipt = [
		'xcode-swift-application': [],
		'xcode-custom-file-reference': [],
	]
	task.from('xcode-swift-application') {
		into('xcode-swift-application')
		exclude("**/*.xcuserdatad/**")
		includeEmptyDirs(false)
	}

	task.from('xcode-custom-file-reference') {
		into('xcode-custom-file-reference')
		exclude("**/*.xcuserdatad/**")
		includeEmptyDirs(false)
	}

	task.eachFile {
		receipt.computeIfPresent(it.relativePath.segments[0]) { key, value ->
			value.add(it.relativePath.toString())
			return value
		}
	}

	task.doLast {
		receipt.each { k, v ->
			new File(task.getDestinationDir(), "${k}.sample").text = v.join('\n')
		}
	}
}
