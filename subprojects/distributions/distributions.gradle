import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
	id 'nokeebuild.repositories'
	id 'lifecycle-base'
	id 'maven-publish'
}

def allPluginProjectPaths = (rootProject.allprojects - [project(':docs'), project(':docs:exemplarKit'), project(':distributions'), project(':internalTesting')])*.path

def publishToStaging = tasks.register('publishToStaging') {
	group = 'publishing'
	doLast {
		println "Published version ${project.version}"
	}
}

// TODO: Add distribution test that ensure gradle-api is not inside any pom (or any dev.gradleplugins artifacts)

def distributionRepository = layout.buildDirectory.dir('repository')
allPluginProjectPaths.each { String projectPath ->
	project(projectPath) { Project proj ->
		def publishToDistribution = proj.tasks.register('publishToDistribution')
		proj.pluginManager.withPlugin('maven-publish') {
			proj.publishing.repositories.maven {
				name = 'distribution'
				url = distributionRepository
			}
			publishToDistribution.configure { dependsOn('publishAllPublicationsToDistributionRepository') }
		}
	}
	publishToStaging.configure { dependsOn("${projectPath}:publishToDistribution") }
}

def serviceVersionBeaconTask = tasks.register("serviceVersionBeacon") {
	def outputFile = layout.buildDirectory.file("tmp/${it.name}/version.json")
	def isHead = System.properties.containsKey('milestone')
	outputs.file(outputFile)
	it.inputs.property('version', { version.toString() })
	it.inputs.property('head', isHead)
	doLast {
		outputFile.get().asFile.text = """{
  "version": "${version.toString()}",
  "snapshot": ${version.toString().contains('-')},
  "head": ${isHead == true},
  "buildTime": "${LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)}"
}
"""
	}
}

publishing {
	publications {
		serviceVersionBeacon(MavenPublication) {
			artifactId = 'version'
			artifact(serviceVersionBeaconTask)
		}
	}
}
