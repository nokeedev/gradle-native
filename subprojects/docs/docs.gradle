import dev.gradleplugins.fixtures.sample.JavaBasicGradlePlugin
import dev.gradleplugins.fixtures.sources.NativeSourceElement
import dev.gradleplugins.fixtures.sources.SourceElement
import dev.nokee.docs.PluginManagementBlock
import dev.nokee.docs.tasks.AsciicastCompile
import dev.nokee.docs.tasks.CreateAsciinema
import dev.nokee.docs.tasks.ExtractScreenshot
import dev.nokee.docs.tasks.GifCompile
import dev.nokee.platform.ios.fixtures.ObjectiveCIosApp
import dev.nokee.platform.ios.fixtures.SwiftIosApp
import dev.nokee.platform.jni.fixtures.*
import dev.nokee.platform.jni.fixtures.elements.CppGreeter
import dev.nokee.platform.jni.fixtures.elements.SwiftGreeter
import dev.nokee.platform.nativebase.fixtures.*

import java.text.SimpleDateFormat

buildscript {
	repositories {
		maven { url = 'https://dl.bintray.com/gradle-plugins/distributions' }
	}
	dependencies {
		classpath 'dev.nokee:templates:latest.integration'
		classpath testFixtures("dev.gradleplugins:gradle-plugin-development:${toolboxVersion}")
	}
}

plugins {
	id 'dev.nokeebuild.documentation'
	id 'maven-publish'
	id 'antlr'
}

docsTest.dependsOn({ project(':distributions').tasks.named('publishToStaging')})
tasks.withType(CreateAsciinema).configureEach {
	dependsOn({ project(':distributions').tasks.named('publishToStaging')})
}

def readMeFile = rootProject.file('readme.adoc')
docsTest.inputs.file(readMeFile)
docsTest.systemProperty('dev.nokee.docs.readme.location', readMeFile.absolutePath)

// The following inputs cause the task to never be up-to-date.
// The solution would be to correctly declare the input/output for `publishToStaging` so it doesn't republish when nothing has changed (and dependencies)
// For now, it's ok, let's solve this when it becomes a real problem.
docsTest.inputs.dir(fileTree(dir: rootProject.file('subprojects/distributions/build/repository'), includes:["**/${rootProject.version}/**/*"]))
docsTest.inputs.dir(layout.buildDirectory.dir("generated/samples"))
docsTest.systemProperty('dev.nokee.docsRepository', rootProject.file('subprojects/distributions/build/repository').absolutePath)
docsTest.systemProperty('sampleContentDirectory', layout.buildDirectory.dir("generated/samples").get().asFile.absolutePath)
docsTest.dependsOn('assembleSamples')
dependencies {
	docsTestImplementation 'org.asciidoctor:asciidoctorj-api:2.2.0'
	docsTestImplementation 'org.asciidoctor:asciidoctorj:2.2.0'
	docsTestImplementation 'dev.gradleplugins:gradle-runner-kit:latest.integration'
	docsTestImplementation gradleFixtures()
	docsTestImplementation gradleApi(minimumGradleVersion) // Is this really needed?
	docsTestImplementation gradleTestKit() // needed for readme tests
	docsTestImplementation project(':coreExec')
	docsTestImplementation project(':coreUtils')

	docsTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	docsTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	docsTestImplementation 'org.apache.commons:commons-lang3:3.9'
	docsTestImplementation 'org.hamcrest:hamcrest:2.2'

	docsTestImplementation "org.antlr:antlr4:${antlrVersion}"
	antlr "org.antlr:antlr4:${antlrVersion}"

	docsTestImplementation 'commons-io:commons-io:2.6'
	docsTestImplementation 'net.sourceforge.nekohtml:nekohtml:1.9.21'
	docsTestImplementation 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'
	docsTestImplementation 'com.google.guava:guava:28.2-jre'
	docsTestImplementation testFixtures('dev.nokee.docs:docs-gradle-plugin:latest.integration')
	docsTestImplementation project(':platformBase')
	docsTestImplementation project(':languageC')
	docsTestImplementation project(':languageCpp')
	docsTestImplementation project(':languageObjectiveC')
	docsTestImplementation project(':languageObjectiveCpp')
	docsTestImplementation project(':languageSwift')
}
// TODO: Improve this Antlr mess... :(
afterEvaluate {
	sourceSets.docsTest.groovy.srcDirs(sourceSets.docsTest.java.srcDirs)
	sourceSets.docsTest.java.srcDirs = []
}
compileGroovy.dependsOn(generateDocsTestGrammarSource)

repositories {
	gradlePluginDevelopment()
}

documentation {
	samples.configureEach { minimumGradleVersion = project.minimumGradleVersion }
	samples {
		'kotlin-cpp-jni-library' {
			template = new KotlinJniCppGreeterLib('kotlin-cpp-jni-library').withJUnitTest()
		}
		'java-cpp-jni-library' {
			template = new JavaJniCppGreeterLib('java-cpp-jni-library')
		}
		'java-c-jni-library' {
			template = new JavaJniCGreeterLib('java-c-jni-library')
		}
		'java-objective-c-jni-library' {
			template = new JavaJniObjectiveCGreeterLib('java-objective-c-jni-library')
		}
		'java-objective-cpp-jni-library' {
			template = new JavaJniObjectiveCppGreeterLib('java-objective-cpp-jni-library')
		}
		'jni-library-with-junit-test' {
			template = new JavaJniCppGreeterLib('jni-library-with-junit-test').withJUnitTest()
		}
		'jni-library-with-pre-built-binaries' {
			template = new JavaJniCppGreeterLib('jni-library-with-pre-built-binaries')
		}
		'jni-library-with-target-machines' {
			template = new JavaJniCppGreeterLib('jni-library-with-target-machines')
		}
		'jvm-application-with-jni-library' {
			template = new GreeterAppWithJniLibrary('jvm-application-with-jni-library').withLibraryAsSubproject('jni-library')
		}
		'jni-library-composing-from-source' {
			template = new JavaJniCppGreeterLib('jni-library-composing-from-source').withImplementationAsSubprojects()
		}
		'jni-library-composing-from-pre-built-binaries' {
			// The project name for the template needs to align with the pre-built binary name
			template = new JavaJniCppGreeterLib('jni-greeter').withoutNativeImplementation().withJUnitTest()
		}
		'publish-jni-library' {
			template = new JavaJniCppGreeterLib('publish-jni-library')
		}
		'publish-jni-library-with-target-machines' {
			template = new JavaJniCppGreeterLib('publish-jni-library-with-target-machines')
		}
		'jni-library-with-custom-source-layout' {
			template = new NativeSourceElement() {
				private final JavaJniCppGreeterLib delegate = new JavaJniCppGreeterLib('jni-library-with-custom-source-layout')

				@Override
				SourceElement getSources() {
					return empty()
				}

				@Override
				void writeToProject(File projectDir) {
					ofSources(delegate).writeToSourceDir(new File(projectDir, 'srcs'))
					ofHeaders(delegate).writeToSourceDir(new File(projectDir, 'incs'))
				}
			}
		}
		'jni-library-with-resource-path' {
			template = new JavaJniCppGreeterLib('jni-library-with-resource-path')
		}
		'jni-library-with-framework-dependencies' {
			template = new JavaJniObjectiveCNSSavePanelLib('jni-library-with-framework-dependencies')
		}
		'jni-library-as-uber-jar' {
			template = new JavaJniCppGreeterLib('jni-library-as-uber-jar')
		}

		'c-application' {
			template = new CGreeterApp()
		}
		'c-library' {
			template = new CGreeter().asLib()
		}
		'cpp-application' {
			template = new CppGreeterApp()
		}
		'cpp-library' {
			template = new CppGreeter().asLib()
		}
		'objective-c-application' {
			template = new ObjectiveCGreeterApp()
		}
		'objective-c-library' {
			template = new ObjectiveCGreeter().asLib()
		}
		'objective-cpp-application' {
			template = new ObjectiveCppGreeterApp()
		}
		'objective-cpp-library' {
			template = new ObjectiveCppGreeter().asLib()
		}
		'swift-application' {
			template = new SwiftGreeterApp()
		}
		'swift-library' {
			template = new SwiftGreeter()
		}

		'xcode-ide-composing' {
			template = new JavaJniObjectiveCGreeterLib('xcode-ide-composing')
		}

		'objective-c-ios-application' {
			template = new ObjectiveCIosApp()
		}
		'objective-c-ios-xctest-test-suite' {
			template = new ObjectiveCIosApp().withUnitTest().withUiTest()
		}
		'swift-ios-application' {
			template = new SwiftIosApp()
		}

		'gradle-plugin-development-runtime-compatibilities' {
			productVersion = project.toolboxVersion
			minimumGradleVersion = '6.2.1'
			pluginManagementBlock = PluginManagementBlock.none()
			template = new JavaBasicGradlePlugin().withProjectBuilderTest()
		}
		'gradle-plugin-development-with-minimum-gradle-version' {
			productVersion = project.toolboxVersion
			minimumGradleVersion = '6.2.1'
			pluginManagementBlock = PluginManagementBlock.none()
			template = new JavaBasicGradlePlugin().withTestKitTest()
		}
		'gradle-plugin-development-with-test-suites' {
			productVersion = project.toolboxVersion
			minimumGradleVersion = '6.2.1'
			pluginManagementBlock = PluginManagementBlock.none()
			template = new JavaBasicGradlePlugin().withProjectBuilderTest().withTestKitFunctionalTest()
		}
		'gradle-plugin-development-with-testing-strategies' {
			productVersion = project.toolboxVersion
			minimumGradleVersion = '6.2.1'
			pluginManagementBlock = PluginManagementBlock.none()
			template = new JavaBasicGradlePlugin().withFunctionalTest()
		}
	}
}


publishing {
	publications {
		jbake(MavenPublication) {
			from components.jbake
			artifactId = 'jbake'
			group = 'dev.nokee.docs'
			// Use date/time as the version because commits mess-up the "latest" search
			version = new SimpleDateFormat("yyyyMMddHHmm").format(new Date())
		}
		baked(MavenPublication) {
			from components.baked
			artifactId = 'nightly'
			group = 'dev.nokee.docs'
			// Use date/time as the version because commits mess-up the "latest" search
			version = new SimpleDateFormat("yyyyMMddHHmm").format(new Date())
		}
	}
	repositories {
		maven {
			name = 'S3'
			credentials(AwsCredentials) {
				it.accessKey = resolveProperty(project, "AWS_ACCESS_KEY", "dev.nokee.aws.user")
				it.secretKey = resolveProperty(project, "AWS_SECRET_KEY", "dev.nokee.aws.key")
			}
			url = 's3://docs.nokee.dev/'
		}
	}
}

private String resolveProperty(Project project, String envVarKey, String projectPropKey) {
	Object propValue = System.getenv().get(envVarKey);

	if (propValue != null) {
		return propValue.toString();
	}

	propValue = project.findProperty(projectPropKey);
	if (propValue != null) {
		return propValue.toString();
	}

	return null;
}

afterEvaluate {
	[ExtractScreenshot, CreateAsciinema, AsciicastCompile, GifCompile].each { type ->
		tasks.withType(type).configureEach {
			onlyIf {
				return !project.hasProperty('skipAllAsciinemaTasks')
			}
		}
	}
}

tasks.register('bakedDocsTest', Test) { task ->
	task.group(LifecycleBasePlugin.VERIFICATION_GROUP)
	task.dependsOn('assembleDocumentation')
	tasks.docsTest.copyTo((JavaForkOptions)task)
	task.inputs.dir(layout.buildDirectory.dir('generated/baked'))
	task.systemProperty('bakedContentDirectory', layout.buildDirectory.dir('generated/baked').get().asFile.absolutePath)
	task.useJUnit {
		includeCategories('dev.nokee.docs.tags.Baked')
	}
	task.testClassesDirs = tasks.docsTest.testClassesDirs
	task.classpath = tasks.docsTest.classpath
}

tasks.named('docsTest', Test) { task ->
	task.dependsOn('assembleSampleZips')
	task.useJUnit {
		excludeCategories('dev.nokee.docs.tags.Baked')
	}
	task.inputs.dir(layout.buildDirectory.dir('generated/zips'))
	task.systemProperty('sampleArchiveDirectory', layout.buildDirectory.dir('generated/zips').get().asFile.absolutePath)
}

// Disabled glue coming from docs-gradle-plugins, those will be merged to Nokee directly
//tasks.named('stageDocumentation', Sync) {
//	from(tasks.getByPath(':distributions:javadoc')) {
//		into('docs/nightly/javadoc')
//	}
//}
