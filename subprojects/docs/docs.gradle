import dev.gradleplugins.fixtures.sample.JavaBasicGradlePlugin
import dev.nokee.docs.PluginManagementBlock
import dev.nokee.platform.ios.fixtures.ObjectiveCIosApp
import dev.nokee.platform.ios.fixtures.SwiftIosApp
import dev.nokee.platform.jni.fixtures.*
import dev.nokee.platform.nativebase.fixtures.*
import net.nokeedev.jbake.JBakeTask

import java.text.SimpleDateFormat

buildscript {
	repositories {
		maven { url = 'https://repo.nokee.dev/release' }
	}
	dependencies {
		classpath('dev.nokee:templates:latest.integration') {
			exclude group: 'org.codehaus.groovy', module: 'groovy-all'
		}
		classpath("dev.gradleplugins:gradle-plugin-development-test-fixtures:${toolboxVersion}") {
			exclude group: 'org.codehaus.groovy', module: 'groovy-all'
			exclude group: 'dev.gradleplugins', module: 'gradle-fixtures'
		}
	}
}

plugins {
	id 'nokeebuild.repositories'
	id 'dev.nokeebuild.documentation'
	id 'maven-publish'
	id 'dev.gradleplugins.documentation.javadoc-api-reference'
}

repositories {
	maven {
		name 'docsNokeeDev'
		url = 's3://docs.nokee.dev'
		credentials(AwsCredentials)
	}
}

docsTest.dependsOn({ project(':distributions').tasks.named('publishToStaging')})

def readMeFile = rootProject.file('README.adoc')
docsTest.inputs.file(readMeFile)
docsTest.systemProperty('dev.nokee.docs.readme.location', readMeFile.absolutePath)

// The following inputs cause the task to never be up-to-date.
// The solution would be to correctly declare the input/output for `publishToStaging` so it doesn't republish when nothing has changed (and dependencies)
// For now, it's ok, let's solve this when it becomes a real problem.
docsTest.inputs.dir(fileTree(dir: rootProject.file('subprojects/distributions/build/repository'), includes:["**/${rootProject.version}/**/*"]))
docsTest.systemProperty('dev.nokee.docsRepository', rootProject.file('subprojects/distributions/build/repository').absolutePath)
dependencies {
	docsTestImplementation 'org.asciidoctor:asciidoctorj-api:2.2.0'
	docsTestImplementation 'org.asciidoctor:asciidoctorj:2.2.0'
	docsTestImplementation 'dev.gradleplugins:gradle-runner-kit:latest.integration'
	docsTestImplementation gradleFixtures()
	docsTestImplementation gradleApi(minimumGradleVersion) // Is this really needed?
	docsTestImplementation gradleTestKit(minimumGradleVersion) // needed for readme tests
	docsTestImplementation project(':coreExec')
	docsTestImplementation project(':coreUtils')

	docsTestImplementation project(':internalTesting')

	docsTestImplementation 'commons-io:commons-io:2.6'
	docsTestImplementation 'net.sourceforge.nekohtml:nekohtml:1.9.21'
	docsTestImplementation 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'
	docsTestImplementation testFixtures('dev.nokee.docs:docs-gradle-plugin:latest.integration')
	docsTestImplementation project(':platformBase')
	docsTestImplementation project(':languageC')
	docsTestImplementation project(':languageCpp')
	docsTestImplementation project(':languageObjectiveC')
	docsTestImplementation project(':languageObjectiveCpp')
	docsTestImplementation project(':languageSwift')
	docsTestImplementation project('exemplarKit')
	docsTestImplementation testFixtures(project('exemplarKit'))
	docsTestImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
	docsTestImplementation "org.jsoup:jsoup:${jsoupVersion}"
	docsTestImplementation "com.google.code.gson:gson:${gsonVersion}"

	jbake 'dev.nokee.docs:layout-page:latest.release'
	jbake 'dev.nokee.docs:component-multi-language-sample:latest.release'
	content project(':ideXcode')
	content project(':languageBase')
	content project(':languageC')
	content project(':languageCpp')
	content project(':languageNative')
	content project(':languageObjectiveC')
	content project(':languageObjectiveCpp')
	content project(':languageSwift')
	content project(':platformBase')
	content project(':platformC')
	content project(':platformCpp')
	content project(':platformJni')
	content project(':platformNative')
	content project(':platformObjectiveC')
	content project(':platformObjectiveCpp')
	content project(':platformSwift')
	content project(':runtimeNative')
}

jbake {
	content.from(fileTree('src/docs') { include('dsl/index.adoc') })
}

documentation {
	samples {
		'kotlin-cpp-jni-library' {
			template.set(new KotlinJniCppGreeterLib('kotlin-cpp-jni-library').withJUnitTest())
		}
		'java-cpp-jni-library' {
			template.set(new JavaJniCppGreeterLib('java-cpp-jni-library'))
		}
		'java-c-jni-library' {
			template.set(new JavaJniCGreeterLib('java-c-jni-library'))
		}
		'java-objective-c-jni-library' {
			template.set(new JavaJniObjectiveCGreeterLib('java-objective-c-jni-library'))
		}
		'java-objective-cpp-jni-library' {
			template.set(new JavaJniObjectiveCppGreeterLib('java-objective-cpp-jni-library'))
		}
		'jni-library-with-junit-test' {
			template.set(new JavaJniCppGreeterLib('jni-library-with-junit-test').withJUnitTest())
		}
		'jni-library-with-pre-built-binaries' {
			template.set(new JavaJniCppGreeterLib('jni-library-with-pre-built-binaries'))
		}
		'jni-library-with-target-machines' {
			template.set(new JavaJniCppGreeterLib('jni-library-with-target-machines'))
		}
		'jvm-application-with-jni-library' {
			template.set(new GreeterAppWithJniLibrary('jvm-application-with-jni-library').withLibraryAsSubproject('jni-library'))
		}
		'jni-library-composing-from-source' {
			template.set(new JavaJniCppGreeterLib('jni-library-composing-from-source').withImplementationAsSubprojects())
		}
		'jni-library-composing-from-pre-built-binaries' {
			// The project name for the template needs to align with the pre-built binary name
			template.set(new JavaJniCppGreeterLib('jni-greeter').withoutNativeImplementation().withJUnitTest())
		}
		'publish-jni-library' {
			template.set(new JavaJniCppGreeterLib('publish-jni-library'))
		}
		'publish-jni-library-with-target-machines' {
			template.set(new JavaJniCppGreeterLib('publish-jni-library-with-target-machines'))
		}
		'jni-library-with-resource-path' {
			template.set(new JavaJniCppGreeterLib('jni-library-with-resource-path'))
		}
		'jni-library-with-framework-dependencies' {
			template.set(new JavaJniObjectiveCNSSavePanelLib('jni-library-with-framework-dependencies'))
		}
		'jni-library-as-uber-jar' {
			template.set(new JavaJniCppGreeterLib('jni-library-as-uber-jar'))
		}

		'c-application' {
			template.set(new CGreeterApp())
		}
		'c-library' {
			template.set(new CGreeterLib())
		}
		'cpp-application' {
			template.set(new CppGreeterApp())
		}
		'cpp-library' {
			template.set(new CppGreeterLib())
		}
		'objective-c-application' {
			template.set(new ObjectiveCGreeterApp())
		}
		'objective-c-library' {
			template.set(new ObjectiveCGreeterLib())
		}
		'objective-cpp-application' {
			template.set(new ObjectiveCppGreeterApp())
		}
		'objective-cpp-library' {
			template.set(new ObjectiveCppGreeterLib())
		}
		'swift-application' {
			template.set(new SwiftGreeterApp())
		}
		'swift-library' {
			template.set(new SwiftGreeterLib())
		}

		'xcode-ide-composing' {
			template.set(new JavaJniObjectiveCGreeterLib('xcode-ide-composing'))
		}

		'objective-c-ios-application' {
			template.set(new ObjectiveCIosApp())
		}
		'objective-c-ios-xctest-test-suite' {
			template.set(new ObjectiveCIosApp().withUnitTest().withUiTest())
		}
		'swift-ios-application' {
			template.set(new SwiftIosApp())
		}

		'gradle-plugin-development-runtime-compatibilities' {
			productVersion = project.toolboxVersion
			pluginManagementBlock.set(PluginManagementBlock.none())
			template.set(new JavaBasicGradlePlugin().withProjectBuilderTest())
		}
		'gradle-plugin-development-with-minimum-gradle-version' {
			productVersion = project.toolboxVersion
			pluginManagementBlock.set(PluginManagementBlock.none())
			template.set(new JavaBasicGradlePlugin().withTestKitTest())
		}
		'gradle-plugin-development-with-test-suites' {
			productVersion = project.toolboxVersion
			pluginManagementBlock.set(PluginManagementBlock.none())
			template.set(new JavaBasicGradlePlugin().withProjectBuilderTest().withTestKitFunctionalTest())
		}
		'gradle-plugin-development-with-testing-strategies' {
			productVersion = project.toolboxVersion
			pluginManagementBlock.set(PluginManagementBlock.none())
			template.set(new JavaBasicGradlePlugin().withFunctionalTest())
		}
	}
}

publishing {
	publications {
		jbake(MavenPublication) {
			from components.jbake
			artifactId = 'docs'
			group = 'dev.nokee.docs'
			// Use date/time as the version because commits mess-up the "latest" search
			version = new SimpleDateFormat("yyyyMMddHHmm").format(new Date())
		}
	}
	repositories {
		maven {
			name = 'docsNokeeDev'
			credentials(AwsCredentials)
			url = 's3://docs.nokee.dev/'
		}
	}
}

tasks.register('bakedDocsTest', Test) { task ->
	task.group(LifecycleBasePlugin.VERIFICATION_GROUP)
	tasks.docsTest.copyTo((JavaForkOptions)task)

	def bakeDirectory = tasks.named('bake', JBakeTask).map { it.destinationDirectory.get() }
	task.inputs.dir(bakeDirectory)
	task.systemProperty('bakedContentDirectory', bakeDirectory.get().asFile.absolutePath)

	task.useJUnitPlatform {
		includeTags('Baked')
	}
	task.testClassesDirs = tasks.docsTest.testClassesDirs
	task.classpath = tasks.docsTest.classpath
}

tasks.named('docsTest', Test) { task ->
	def samplesDirectory = tasks.named('assembleSamples', Sync).map { it.destinationDir }
	task.inputs.dir(samplesDirectory)
	task.systemProperty('sampleContentDirectory', samplesDirectory.get().absolutePath)
}

tasks.named('docsTest', Test) { task ->
	task.useJUnitPlatform {
		excludeTags('Baked')
	}

	def zipsDirectory = tasks.named('assembleSampleZips', Sync).map { it.destinationDir }
	task.inputs.dir(zipsDirectory)
	task.systemProperty('sampleArchiveDirectory', zipsDirectory.get().absolutePath)
}
