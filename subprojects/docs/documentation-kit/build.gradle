plugins {
	id 'java-library'
	id 'maven-publish'
}

description = 'Suite of Gradle plugins to generate documentation and site.'

dependencies {
	api project(':build-language-reference')
	api project(':publishing-github-pages')
	api project(':rendering-jbake')
	api project(':site-base')
	api project(':site-github-pages')
}

allprojects {
	group = 'dev.gradleplugins'
	version = '1.0.5'
}

publishing.publications.create('java', MavenPublication) {
	from components.java
}

// Unit test configuration
subprojects {
	configurations.matching { it.name == 'testImplementation' }.all { Configuration testImplementation ->
		testImplementation.dependencies.add(project.dependencies.create("org.junit.jupiter:junit-jupiter:${junitVersion}"))
		testImplementation.dependencies.add(project.dependencies.create("org.junit.vintage:junit-vintage-engine:${junitVersion}"))
		testImplementation.dependencies.add(project.dependencies.create("org.junit-pioneer:junit-pioneer:1.2.0"))
		testImplementation.dependencies.add(project.dependencies.create("org.hamcrest:hamcrest:${hamcrestVersion}"))
	}
	configurations.matching { it.name == 'functionalTestImplementation' }.all { Configuration functionalTestImplementation ->
		functionalTestImplementation.dependencies.add(project.dependencies.create("org.junit.jupiter:junit-jupiter:${junitVersion}"))
		functionalTestImplementation.dependencies.add(project.dependencies.create("org.junit.vintage:junit-vintage-engine:${junitVersion}"))
	}
	tasks.withType(Test).configureEach { useJUnitPlatform() }
}

// Lombok configuration
subprojects {
	pluginManager.withPlugin('java-base') {
		sourceSets.configureEach {
			dependencies.add(annotationProcessorConfigurationName, "org.projectlombok:lombok:${lombokVersion}")
			dependencies.add(compileOnlyConfigurationName, "org.projectlombok:lombok:${lombokVersion}")
		}
	}
}

// Publish to Nokee
allprojects {
	apply plugin: 'maven-publish'
	publishing {
		repositories {
			maven {
				name = 'nokeeRelease'
				url = providers.gradleProperty("${name}Url").forUseAtConfigurationTime().orElse("")
				credentials(AwsCredentials)
			}
		}
	}
}
