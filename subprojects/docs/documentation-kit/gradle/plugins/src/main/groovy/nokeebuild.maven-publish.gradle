plugins {
	id 'maven-publish'
	id 'signing'
}

def repositorySlug = 'nokeedev/gradle-native'

publishing {
	publications.withType(MavenPublication).all {
		pom {
			name = provider { "${groupId}:${artifactId}" }
			description = provider { project.description }
			inceptionYear = '2020'
			url = "https://github.com/${repositorySlug}"
			scm {
				connection = "scm:git:git://github.com/${repositorySlug}.git"
				developerConnection = "scm:git:ssh://github.com:${repositorySlug}.git"
				url = "http://github.com/${repositorySlug}/tree/main"
			}
			developers {
				developer {
					name = 'Daniel Lacasse'
					id = 'lacasseio'
				}
			}
			licenses {
				license {
					name = 'Apache License, Version 2.0'
					url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
				}
			}
		}
	}
}

// Because... don't get me started...
plugins.withId('java-gradle-plugin') {
	afterEvaluate {
		publishing.publications.withType(MavenPublication) {
			pom {
				name = provider { "${groupId}:${artifactId}" }
				description = provider { project.description }
			}
		}
	}
}

signing {
	sign publishing.publications
	if (!project.hasProperty('signing.secretKeyRingFile')) {
		def signingKeyId = findProperty("signing.keyId").toString()
		def signingKey = findProperty("signing.key").toString()
		def signingPassword = findProperty("signing.password").toString()
		useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
	}
}
