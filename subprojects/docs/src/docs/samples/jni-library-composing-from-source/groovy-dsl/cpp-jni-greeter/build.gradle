plugins {
	id 'dev.nokee.cpp-library'
}

description = 'The JNI shared library, also known as the native bindings.'

import org.gradle.internal.jvm.Jvm
import dev.nokee.platform.nativebase.NativeBinary

library {
	// The native component of the JNI library needs to be a shared library.
	targetLinkages = [linkages.shared]
	dependencies {
		implementation project(':cpp-greeter')
	}

	binaries.configureEach(NativeBinary) {
		compileTasks.configureEach({ it instanceof AbstractNativeCompileTask }) {
			def compileTask = it as AbstractNativeCompileTask
			compileTask.includes.from(compileTask.targetPlatform.map {
				def result = [new File("${Jvm.current().javaHome.absolutePath}/include")]

				if (it.operatingSystem.macOsX) {
					result.add(new File("${Jvm.current().javaHome.absolutePath}/include/darwin"))
				} else if (it.operatingSystem.linux) {
					result.add(new File("${Jvm.current().javaHome.absolutePath}/include/linux"))
				} else if (it.operatingSystem.windows) {
					result.add(new File("${Jvm.current().javaHome.absolutePath}/include/win32"))
				} else if (it.operatingSystem.freeBSD) {
					result.add(new File("${Jvm.current().javaHome.absolutePath}/include/freebsd"))
				}
				return result
			})
			compileTask.positionIndependentCode = true
		}
	}
}
