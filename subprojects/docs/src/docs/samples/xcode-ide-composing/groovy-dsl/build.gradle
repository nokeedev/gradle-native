import dev.nokee.language.nativebase.tasks.NativeSourceCompile
import dev.nokee.platform.jni.JvmJarBinary
import dev.nokee.platform.nativebase.SharedLibraryBinary

plugins {
	id 'java'
	id 'dev.nokee.jni-library'
	id 'dev.nokee.objective-c-language'
	id 'dev.nokee.xcode-ide-base'
}

library.variants.configureEach {
	sharedLibrary {
		// Some compiler on FreeBSD does not use local base
		compileTasks.configureEach({ it instanceof AbstractNativeCompileTask }) {
			def compileTask = it as AbstractNativeCompileTask
			compileTask.includes.from(compileTask.targetPlatform.map {
				it.operatingSystem.freeBSD ? ['/usr/local/include'] : []
			})
		}
		linkTask.configure {
			linkerArgs.add('-lobjc')
			linkerArgs.addAll((it as LinkSharedLibrary).targetPlatform.map {
				it.operatingSystem.freeBSD ? ['/usr/local/lib'] : []
			})
		}
	}
}

//region Helper methods
Provider<JvmJarBinary> getJvmBinary() {
	return library.binaries.withType(JvmJarBinary).elements.map { it.first() }
}

Provider<SharedLibraryBinary> getSharedLibraryBinary() {
	return library.binaries.withType(SharedLibraryBinary).elements.map { it.first() }
}

Transformer<String, SharedLibraryBinary> asHeaderSearchPaths() {
	return {
		it.compileTasks.withType(NativeSourceCompile).get().first().headerSearchPaths.get().collect { "\"${it.asFile.absolutePath}\"" }.join(' ')
	}
}
//endregion

xcode {
	projects.register('jni-greeter') {
		targets.register('JniJar') {
			productReference = jvmBinary.flatMap { it.jarTask.get().archiveFileName }
			productType = productTypes.of('com.apple.product-type.library.java.archive')
			buildConfigurations.register('Default') {
				productLocation = jvmBinary.flatMap { it.jarTask.get().archiveFile }
				buildSettings.put('PRODUCT_NAME', ideTarget.productName)
			}
			sources.from(fileTree('src/main/java') { include('**/*.java') })
		}
		targets.register('JniSharedLibrary') {
			productReference = sharedLibraryBinary.map { it.linkTask.get().linkedFile.get().asFile.getName() }
			productType = productTypes.dynamicLibrary
			buildConfigurations.register('Default') {
				productLocation = sharedLibraryBinary.flatMap { it.linkTask.get().linkedFile }
				buildSettings.put('HEADER_SEARCH_PATHS', sharedLibraryBinary.map(asHeaderSearchPaths()))
				buildSettings.put('PRODUCT_NAME', ideTarget.productName)
			}
			sources.from(fileTree('src/main/objc') { include('**/*.m') })
			sources.from(fileTree('src/main/headers') { include('**/*.h') })
		}
	}
}
