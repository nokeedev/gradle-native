plugins {
	id 'java'
	id 'dev.nokee.jni-library'
	id 'dev.nokee.cpp-language'
}


import java.util.concurrent.Callable
import dev.nokee.runtime.nativebase.OperatingSystemFamily

String getLibraryFileNameFor(OperatingSystemFamily osFamily) {
	if (osFamily.windows) {
		return "${project.name}.dll"
	} else if (osFamily.linux) {
		return "lib${project.name}.so"
	} else if (osFamily.macOS) {
		return "lib${project.name}.dylib"
	} else if (osFamily.freeBSD) {
		return "lib${project.name}.so"
	}
	throw new GradleException("Unknown operating system family '${osFamily}'.")
}

library {
	variants.configureEach {
		def prebuiltLibraryFile = file("pre-built-library/${getLibraryFileNameFor(targetMachine.operatingSystemFamily)}")
		if (prebuiltLibraryFile.exists()) { // <1>
			nativeRuntimeFiles.setFrom(prebuiltLibraryFile)
			nativeRuntimeFiles.from(new CallableLogger({project.logger.warn("Using the pre-build library.")})) // <2>
		} else {
			nativeRuntimeFiles.from(new CallableLogger({project.logger.warn("Building from the source.")})) // <2>
		}
	}
}

/**
 * A callable to log a message on the console only on the first call.
 */
class CallableLogger implements Callable<List<File>> {
	private final Runnable logger
	private boolean messageAlreadyLogged = false

	CallableLogger(Runnable logger) {
		this.logger = logger
	}

	@Override
	List<File> call() throws Exception {
		if (!messageAlreadyLogged) { // <3>
			logger.run()
			messageAlreadyLogged = true
		}
		return Collections.emptyList()
	}
}
